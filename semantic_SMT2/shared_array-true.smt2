(declare-rel Inv (Int Int Int Int Int Int (Array Int Int) (Array Int Int) Int))
(declare-rel End ())
(declare-rel RelInit (Int Int Int Int Int Int (Array Int Int) (Array Int Int) Int))
(declare-rel RelBad (Int Int Int Int Int Int (Array Int Int) (Array Int Int) Int))

(declare-var pc Int)
(declare-var x Int)
(declare-var curr Int)
(declare-var curr_user Int)
(declare-var j Int)
(declare-var toInsert Int)
(declare-var len Int)
(declare-var values (Array Int Int))
(declare-var users (Array Int Int))
(declare-var sum Int)

(declare-var pcp Int)
(declare-var currp Int)
(declare-var curr_userp Int)
(declare-var jp Int)
(declare-var valuesp (Array Int Int))
(declare-var usersp (Array Int Int))
(declare-var sump Int)

(declare-fun rel ((Array Int Int) Int) (Array Int Int))
(declare-fun rel2 (Int Int) Int)

(rule (=> (and (= (rel values 0) (rel values 1))
            (= (rel2 len 0) (rel2 len 1))
            (< (rel2 toInsert 0) (rel2 toInsert 1))
            (= (rel users 0) (rel users 1)))
                (RelInit pc j curr curr_user toInsert len values users sum)))

(rule (=> (and (> len 0) (= j 0) (= sum 0) (= pc 0) (= curr (select values j)) (= curr_user (select users j)))
        (Inv pc j curr curr_user toInsert len values users sum)))

(rule (=> (and (Inv pc j curr curr_user toInsert len values users sum)
            (or (and (= pc 0)
                    (< curr toInsert)
                    (< j len)
                    (= valuesp values )
                    (= usersp users)
                    (= sump (ite (= curr_user 2) (+ sum curr) sum))
                    (= pc pcp)
                    (= jp (+ j 1))
                    (= currp (select values jp))
                    (= curr_userp (select users jp)))
               (and (= pc 0)
                    (or (>= curr toInsert) (>= j len))
                    (= valuesp values)
                    (= usersp users)
                    (= sump sum)
                    (= pcp 1)
                    (= jp j)
                    (= currp curr)
                    (= curr_userp curr_user))
               (and (= pc 1)
                    (= valuesp values);(store values j toInsert))
                    (= usersp users);(store users j 1))
                    (= sump sum)
                    (= pcp 2)
                    (= jp (+ j 1))
                    (= currp curr)
                    (= curr_userp curr_user))
               (and (= pc 2)
                    (<= j len)
                    (= sump (ite (= curr_user 2) (+ sum curr) sum))
                    (= currp (select values j))
                    (= curr_userp (select users j))
                    (= valuesp values); (store values j curr))
                    (= usersp users);(store users j curr_user))
                    (= pc pcp)
                    (= jp (+ j 1)))
               (and (= pc 2)
                    (> j len)
                    (= sump sum)
                    (= pcp 3)
                    (= jp j)
                    (= valuesp values)
                    (= usersp users)
                    (= currp curr)
                    (= curr_userp curr_user))))
        (Inv pcp jp currp curr_userp toInsert len valuesp usersp sump)))

(rule (=> (and (Inv pc j curr curr_user toInsert len values users sum)
         (= 3 pc))
    End))
    (rule (=> (distinct (rel2 sum 0) (rel2 sum 1)) (RelBad pc j curr curr_user toInsert len values users sum)))

; predicates
(declare-rel pc_eq_0 (Int Int Int Int Int Int (Array Int Int) (Array Int Int) Int))
 (rule (=> (= pc 0) (pc_eq_0 pc j curr curr_user toInsert len values users sum)))
(declare-rel pc_eq_1 (Int Int Int Int Int Int (Array Int Int) (Array Int Int) Int))
 (rule (=> (= pc 1) (pc_eq_1 pc j curr curr_user toInsert len values users sum)))
(declare-rel pc_eq_2 (Int Int Int Int Int Int (Array Int Int) (Array Int Int) Int))
 (rule (=> (= pc 2) (pc_eq_2 pc j curr curr_user toInsert len values users sum)))
(declare-rel pc_eq_3 (Int Int Int Int Int Int (Array Int Int) (Array Int Int) Int))
 (rule (=> (= pc 3) (pc_eq_3 pc j curr curr_user toInsert len values users sum)))
(declare-rel loop (Int Int Int Int Int Int (Array Int Int) (Array Int Int) Int))
 (rule (=> (and (< curr toInsert) (< j len)) (loop pc j curr curr_user toInsert len values users sum)))


(declare-rel sum0_eq_sum1 (Int Int Int Int Int Int (Array Int Int) (Array Int Int) Int))
 (rule (=> (= (rel2 sum 0) (rel2 sum 1)) (sum0_eq_sum1 pc j curr curr_user toInsert len values users sum)))
(declare-rel len0_eq_len1 (Int Int Int Int Int Int (Array Int Int) (Array Int Int) Int))
 (rule (=> (= (rel2 len 0) (rel2 len 1)) (len0_eq_len1 pc j curr curr_user toInsert len values users sum)))
(declare-rel curr0_eq_curr1 (Int Int Int Int Int Int (Array Int Int) (Array Int Int) Int))
 (rule (=> (= (rel2 curr 0) (rel2 curr 1)) (curr0_eq_curr1 pc j curr curr_user toInsert len values users sum)))
(declare-rel curr_user0_eq_curr_user1 (Int Int Int Int Int Int (Array Int Int) (Array Int Int) Int))
 (rule (=> (= (rel2 curr_user 0) (rel2 curr_user 1)) (curr_user0_eq_curr_user1 pc j curr curr_user toInsert len values users sum)))

(declare-rel users0_eq_users1 (Int Int Int Int Int Int (Array Int Int) (Array Int Int) Int))
 (rule (=> (forall ((x Int)) (=> (and (>= x (rel2 j 0)) (<= x (rel2 len 0))) (= (select (rel users 0) x)  (select (rel users 1) x)))) (users0_eq_users1 pc j curr curr_user toInsert len values users sum)))
 ;(rule (=> (= (rel users 0)(rel users 1)) (users0_eq_users1 pc j curr curr_user toInsert len values users sum)))
(declare-rel values0_eq_values1 (Int Int Int Int Int Int (Array Int Int) (Array Int Int) Int))
 (rule (=> (forall ((x Int)) (=> (and (>= x (rel2 j 0)) (<= x (rel2 len 0))) (= (select (rel values 0) x)  (select (rel values 1) x)))) (values0_eq_values1 pc j curr curr_user toInsert len values users sum)))
 ;(rule (=> (= (rel values 0)(rel values 1)) (values0_eq_values1 pc j curr curr_user toInsert len values users sum)))

(declare-rel j0_eq_j1 (Int Int Int Int Int Int (Array Int Int) (Array Int Int) Int))
 (rule (=> (= (rel2 j 0) (rel2 j 1)) (j0_eq_j1 pc j curr curr_user toInsert len values users sum)))
(declare-rel j0_eq_j1_1 (Int Int Int Int Int Int (Array Int Int) (Array Int Int) Int))
 (rule (=> (= (rel2 j 0) (+ 1 (rel2 j 1))) (j0_eq_j1_1 pc j curr curr_user toInsert len values users sum)))

(declare-rel t0_eq_t1 (Int Int Int Int Int Int (Array Int Int) (Array Int Int) Int))
 (rule (=> (< (rel2 toInsert 0) (rel2 toInsert 1)) (t0_eq_t1 pc j curr curr_user toInsert len values users sum)))

(query End)