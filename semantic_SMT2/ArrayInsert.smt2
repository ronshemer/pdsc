(declare-rel Inv (Int Int Int Int (Array Int Int)))
(declare-rel End ())
(declare-rel RelInit (Int Int Int Int (Array Int Int)))
(declare-rel RelBad (Int Int Int Int (Array Int Int)))

(declare-var pc Int)
(declare-var h Int)
(declare-var i Int)
(declare-var len Int)
(declare-var array (Array Int Int))

(declare-var pcp Int)
(declare-var ip Int)
(declare-var lenp Int)
(declare-var arrayp (Array Int Int))

(declare-fun rel (Int Int) Int)
(declare-fun rel2 ((Array Int Int) Int) (Array Int Int))

(rule (=> (and (= (rel2 array 0) (rel2 array 1)) (= (rel len 0) (rel len 1)))
                (RelInit pc h i len array)))

(rule (=> (and (> len 0) (= i 0) (= pc 0))
        (Inv pc h i len array)))

(rule (=> (and (Inv pc h i len array)
            (or (and (= pc 0)
                    (= pcp 0)
                    (< i len)
                    (= ip (+ i 1))
                    (= lenp len)
                    (= arrayp array)
                    (< h (select array i)))
               (and (= pc 0)
                    (or (>= h (select array i)) (>= i len))
                    (= pcp 1)
                    (= ip i)
                    (= arrayp array)
                    (= lenp len))
               (and (= pc 1); call to shift_array, no constraints on array
                    (= pcp 2)
                    (= ip i)
                    (= lenp len))
               (and (= pc 2)
                    (= lenp (+ 1 len))
                    (= arrayp (store array i h))
                    (= pcp 3)
                    (= ip i))
               (and (= pc 3)
                    (< i len)
                    (= ip (+ i 1 ))
                    (= pcp 3)
                    (= arrayp array)
                    (= lenp len))
               (and (= pc 3)
                    (>= i len)
                    (= ip i)
                    (= pcp 4)
                    (= arrayp array)
                    (= lenp len))))
        (Inv pcp h ip lenp arrayp)))

(rule (=> (and (Inv pc h i len array)
         (= 4 pc))
    End))
(rule (=> (distinct (rel i 0) (rel i 1)) (RelBad pc h i len array)))

; predicates
(declare-rel pc_eq_0 (Int Int Int Int (Array Int Int)))
 (rule (=> (= pc 0) (pc_eq_0 pc h i len array)))
(declare-rel pc_eq_1 (Int Int Int Int (Array Int Int)))
 (rule (=> (= pc 1) (pc_eq_1 pc h i len array)))
(declare-rel pc_eq_2 (Int Int Int Int (Array Int Int)))
 (rule (=> (= pc 2) (pc_eq_2 pc h i len array)))
(declare-rel pc_eq_3 (Int Int Int Int (Array Int Int)))
 (rule (=> (= pc 3) (pc_eq_3 pc h i len array)))
(declare-rel pc_eq_4 (Int Int Int Int (Array Int Int)))
 (rule (=> (= pc 4) (pc_eq_4 pc h i len array)))

(declare-rel loop1 (Int Int Int Int (Array Int Int)))
 (rule (=> (or (>= h (select array i)) (>= i len)) (loop1 pc h i len array)))

(declare-rel i0_eq_i1 (Int Int Int Int (Array Int Int)))
 (rule (=> (= (rel i 0) (rel i 1)) (i0_eq_i1 pc h i len array)))
(declare-rel len0_eq_len1 (Int Int Int Int (Array Int Int)))
 (rule (=> (= (rel len 0) (rel len 1)) (len0_eq_len1 pc h i len array)))
(declare-rel len0_eq_len1_1 (Int Int Int Int (Array Int Int)))
 (rule (=> (= (rel len 0) (+ 1 (rel len 1))) (len0_eq_len1_1 pc h i len array)))
(declare-rel len1_eq_len0_1 (Int Int Int Int (Array Int Int)))
 (rule (=> (= (rel len 1) (+ 1 (rel len 0))) (len1_eq_len0_1 pc h i len array)))

;(query End)